// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('xmlhttprequest', {
  XMLHttpRequest: XMLHttpRequest
});

define(function(require, exports) {
  var App, Collection, ExfmResolver, Record, ResolverSet, ResultList, SearchBox, Song, SongView, Songs, SoundCloudResolver, Stream, View, YouTubeResolver, extend, player, rankSearchResults, renderInPlace, resolve, resolver, search, soundManager, uniqueId, youtubeManager, _ref, _ref1, _ref2;
  _ref = require('underscore'), extend = _ref.extend, uniqueId = _ref.uniqueId;
  Collection = require('backbone').Collection;
  _ref1 = require('backbone.viewdsl'), View = _ref1.View, renderInPlace = _ref1.renderInPlace;
  Record = require('backbone.record').Record;
  soundManager = require('soundmanager2');
  youtubeManager = require('youtubemanager');
  _ref2 = require('songlocator-base'), ResolverSet = _ref2.ResolverSet, rankSearchResults = _ref2.rankSearchResults;
  YouTubeResolver = require('songlocator-youtube').Resolver;
  SoundCloudResolver = require('songlocator-soundcloud').Resolver;
  ExfmResolver = require('songlocator-exfm').Resolver;
  resolver = new ResolverSet(new YouTubeResolver(), new SoundCloudResolver(), new ExfmResolver());
  Stream = (function(_super) {

    __extends(Stream, _super);

    function Stream() {
      return Stream.__super__.constructor.apply(this, arguments);
    }

    Stream.define('track', 'artist', 'source', 'audioURL', 'linkURL', 'imageURL', 'rank');

    return Stream;

  })(Record);
  Song = (function(_super) {

    __extends(Song, _super);

    Song.define('track', 'artist', 'streams');

    function Song() {
      Song.__super__.constructor.apply(this, arguments);
      this.streams = this.streams || new Collection();
      if (!(this.streams instanceof Collection)) {
        this.streams = new Collection(this.streams);
      }
    }

    Song.prototype.rank = function() {
      return Math.min.apply(null, this.streams.map(function(s) {
        return s.rank;
      }));
    };

    Song.prototype.fullTitle = function() {
      return "" + this.track + " - " + this.artist;
    };

    return Song;

  })(Record);
  Songs = (function(_super) {

    __extends(Songs, _super);

    function Songs() {
      return Songs.__super__.constructor.apply(this, arguments);
    }

    Songs.prototype.comparator = function(song) {
      return song.rank();
    };

    Songs.prototype.findSong = function(track, artist) {
      return this.find(function(song) {
        return song.artist.toLowerCase() === artist.toLowerCase() && song.track.toLowerCase() === track.toLowerCase();
      });
    };

    Songs.prototype.addStream = function(stream) {
      var song, streams;
      song = this.findSong(stream.track, stream.artist);
      if (song) {
        streams = song.streams.where({
          source: stream.source
        });
        if (streams.length === 0) {
          return song.streams.add(stream);
        }
      } else {
        song = new Song({
          track: stream.track,
          artist: stream.artist,
          streams: [stream]
        });
        return this.add(song);
      }
    };

    return Songs;

  })(Collection);
  App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.className = 'app';

    App.prototype.parameterizable = true;

    App.prototype.template = "<article>\n  <view name=\"app:SearchBox\"></view>\n  <view name=\"app:ResultList\"></view>\n</article>\n\n<footer>\n  <div>\n    <h3>SongLocator</h3>\n    <p class=\"feedback\">\n      Have any feedback? Send me a <a\n          target=\"_blank\"\n          href=\"https://twitter.com/share?related=SongLocatorWeb&text=@SongLocatorWeb\"\n          class=\"twitter-share-button\"\n          data-lang=\"en\">tweet</a> or an\n      <a href=\"mailto:8mayday+songlocator@gmail.com\">email</a> message\n    </p>\n  </div>\n</footer>";

    return App;

  })(View);
  SearchBox = (function(_super) {

    __extends(SearchBox, _super);

    function SearchBox() {
      return SearchBox.__super__.constructor.apply(this, arguments);
    }

    SearchBox.prototype.tagName = 'input';

    SearchBox.prototype.className = 'search-box';

    SearchBox.prototype.attributes = {
      name: 'query',
      type: 'text',
      placeholder: 'Search a song...'
    };

    SearchBox.prototype.events = {
      keypress: function(e) {
        var searchString;
        if (e.keyCode !== 13) {
          return;
        }
        searchString = this.$el.val().trim();
        if (!searchString) {
          return;
        }
        return search(searchString);
      }
    };

    return SearchBox;

  })(View);
  ResultList = (function(_super) {

    __extends(ResultList, _super);

    function ResultList() {
      return ResultList.__super__.constructor.apply(this, arguments);
    }

    ResultList.prototype.tagName = 'ul';

    ResultList.prototype.className = 'results';

    ResultList.prototype.resultTemplate = $('<li><view name="app:SongView" model="song"></view></li>');

    ResultList.prototype.initialize = function() {
      var _this = this;
      this.collection = this.collection || new Songs();
      this.collection.on('add', function(model) {
        return _this.renderSong(model);
      });
      this.collection.on('reset', function(model) {
        var view, _i, _len, _ref3, _results;
        _ref3 = _this.views;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          view = _ref3[_i];
          _results.push(view.remove());
        }
        return _results;
      });
      resolver.on('results', function(result) {
        var r, _i, _len, _ref3, _results;
        if (result.qid !== _this.query.qid) {
          return;
        }
        if (_this.query.searchString != null) {
          rankSearchResults(result.results, _this.query.searchString);
        }
        _ref3 = result.results;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          r = _ref3[_i];
          _results.push(_this.processResult(r));
        }
        return _results;
      });
      return app.on('songlocator:search songlocator:resolve', function(query) {
        return _this.reset(query);
      });
    };

    ResultList.prototype.processResult = function(result) {
      var stream;
      if (result.rank > 50) {
        return;
      }
      stream = new Stream({
        track: result.track,
        artist: result.artist,
        source: result.source,
        audioURL: result.url,
        linkURL: result.linkUrl,
        imageURL: void 0,
        rank: result.rank
      });
      return this.collection.addStream(stream);
    };

    ResultList.prototype.appendAt = function(node, idx) {
      var $children;
      $children = this.$el.children();
      if (idx >= $children.size()) {
        return this.$el.append(node);
      } else {
        return $children.eq(idx).before(node);
      }
    };

    ResultList.prototype.renderSong = function(song) {
      var ctx,
        _this = this;
      ctx = {
        song: song
      };
      return this.renderTemplate(this.resultTemplate, {
        song: song
      }).then(function(node) {
        return _this.appendAt(node, _this.collection.indexOf(song));
      }).done();
    };

    ResultList.prototype.reset = function(query) {
      this.collection.reset();
      return this.query = query;
    };

    return ResultList;

  })(View);
  SongView = (function(_super) {

    __extends(SongView, _super);

    function SongView() {
      return SongView.__super__.constructor.apply(this, arguments);
    }

    SongView.prototype.className = 'song';

    SongView.prototype.isPlaying = false;

    SongView.prototype.template = "<span class=\"source\" element-id=\"$sourceLinks\">{{sourceLinks}}</span>\n<div class=\"metadata-line\">\n  <span class=\"track\">{{model.track}}</span>\n  <span class=\"artist\">{{model.artist}}</span>\n</div>\n<div element-id=\"$progress\" class=\"progress\"></div>\n<div element-id=\"$box\" class=\"box\">\n  <div class=\"cover-wrapper\">\n    <div element-id=\"$cover\"></div>\n  </div>\n  <div class=\"controls-wrapper\">\n    <i class=\"icon-play\"></i>\n    <i class=\"icon-pause\"></i>\n  </div>\n  <div class=\"metadata-wrapper\">\n    <div class=\"track\">{{model.track}}</div>\n    <div class=\"artist\">{{model.artist}}</div>\n  </div>\n</div>";

    SongView.prototype.initialize = function() {
      var _this = this;
      app.on('songlocator:play', function(sound) {
        if (sound !== _this.sound) {
          return _this.stop();
        }
      });
      return this.model.streams.on('add', function() {
        return _this.$sourceLinks.html(_this.sourceLinks());
      });
    };

    SongView.prototype.sourceLinks = function() {
      return this.model.streams.map(function(stream) {
        return $("<a target=\"_blank\" href=\"" + stream.linkURL + "\">" + stream.source + "</a>");
      });
    };

    SongView.prototype.events = {
      click: function() {
        if (!this.isPlaying) {
          return this.play();
        }
      },
      'click .controls-wrapper': function(e) {
        e.stopPropagation();
        return this.togglePause();
      }
    };

    SongView.prototype.play = function() {
      this.isPlaying = true;
      this.$el.addClass('playing');
      this.$el.addClass('openned');
      if (!this.sound) {
        this.sound = this.createSound();
      }
      this.sound.play();
      return app.trigger('songlocator:play', this.sound);
    };

    SongView.prototype.stop = function() {
      this.$progress.width(0);
      this.$el.removeClass('playing');
      this.$el.removeClass('openned');
      this.isPlaying = false;
      if (this.sound) {
        return this.sound.stop();
      }
    };

    SongView.prototype.resume = function() {
      this.isPlaying = true;
      this.$el.addClass('playing');
      return this.sound.resume();
    };

    SongView.prototype.pause = function() {
      this.isPlaying = false;
      this.$el.removeClass('playing');
      return this.sound.pause();
    };

    SongView.prototype.togglePause = function() {
      if (this.isPlaying) {
        return this.pause();
      } else {
        return this.resume();
      }
    };

    SongView.prototype.onPlaying = function() {
      var duration, soFar, totalWidth;
      totalWidth = this.$el.width();
      duration = this.sound.durationEstimate || this.sound.duration;
      soFar = this.sound.position / duration;
      return this.$progress.width(soFar * totalWidth);
    };

    SongView.prototype.createSound = function() {
      var _this = this;
      return player.createSound({
        id: uniqueId('sound'),
        playerId: this.playerId,
        width: 200,
        height: 200,
        url: this.model.streams.at(0).audioURL || this.model.streams.at(0).linkURL,
        whileplaying: function() {
          return _this.onPlaying();
        },
        onstop: function() {
          return _this.stop();
        },
        onfinish: function() {
          return _this.stop();
        }
      });
    };

    SongView.prototype.remove = function() {
      SongView.__super__.remove.apply(this, arguments);
      if (this.sound != null) {
        return this.sound.destruct();
      }
    };

    SongView.prototype.render = function() {
      var _this = this;
      return SongView.__super__.render.apply(this, arguments).then(function() {
        _this.playerId = uniqueId('cover');
        return _this.$cover.attr('id', _this.playerId);
      });
    };

    return SongView;

  })(View);
  search = function(searchString) {
    var qid;
    qid = uniqueId('search');
    app.trigger('songlocator:search', {
      qid: qid,
      searchString: searchString
    });
    return resolver.search(qid, searchString);
  };
  resolve = function(track, artist, album) {
    var qid;
    qid = uniqueId('resolve');
    app.trigger('songlocator:resolve', {
      qid: qid,
      artist: artist,
      track: track,
      album: album
    });
    return resolver.resolve(qid, track, artist, album);
  };
  player = {
    createSound: function(options) {
      if (/youtube.com/.test(options.url)) {
        return youtubeManager.createSound(options);
      } else {
        return soundManager.createSound(options);
      }
    }
  };
  $(function() {
    var app;
    soundManager.setup({
      url: 'swf',
      debugMode: false
    });
    youtubeManager.setup();
    exports.app = app = new App();
    app.render();
    return document.body.appendChild(app.el);
  });
  extend(exports, {
    App: App,
    SearchBox: SearchBox,
    ResultList: ResultList,
    SongView: SongView,
    resolve: resolve,
    search: search,
    player: player,
    resolver: resolver
  });
  extend(window, exports);
  return exports;
});
